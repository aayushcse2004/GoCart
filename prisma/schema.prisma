// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  image     String?
  cart      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stores    Store[]
  addresses Address[]
  orders    Order[]
  ratings   Rating[]

  @@map("users")
}

model Store {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  username    String   @unique
  address     String
  status      String   @default("pending") // pending, approved, rejected
  isActive    Boolean  @default(false)
  logo        String?
  email       String
  contact     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]

  @@map("stores")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  mrp         Float
  price       Float
  images      String[] // Array of image URLs
  category    String
  storeId     String
  inStock     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store     Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  ratings   Rating[]
  orderItems OrderItem[]

  @@map("products")
}

model Rating {
  id        String   @id @default(cuid())
  rating    Float
  review    String
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model Address {
  id      String @id @default(cuid())
  userId  String
  name    String
  email   String
  street  String
  city    String
  state   String
  zip     String
  country String
  phone   String
  createdAt DateTime @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  discount    Float    // Percentage discount
  forNewUser  Boolean  @default(false)
  forMember   Boolean  @default(false)
  isPublic    Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  orders Order[]

  @@map("coupons")
}

model Order {
  id           String      @id @default(cuid())
  total        Float
  status       String      @default("pending") // pending, confirmed, delivered, cancelled
  userId       String
  storeId      String
  addressId    String
  isPaid       Boolean     @default(false)
  paymentMethod String     @default("COD") // COD, STRIPE
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isCouponUsed Boolean     @default(false)
  couponId     String?

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  address    Address     @relation(fields: [addressId], references: [id])
  coupon     Coupon?     @relation(fields: [couponId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // Price at the time of order

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
